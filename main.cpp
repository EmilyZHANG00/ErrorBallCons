#include <iostream>
#include "Lcs.h"

void TestA()
{
        /* T=6的情况 */
        compute_xy_lcs_length( "10 10 10 10 10 10 10 10 10 10 10",
            "01 10 01 10 01 10 01 10 01 10 01");      // 全都是零翻转/完全翻转的情况 都是2
        compute_xy_lcs_length( "10 101 0101 01010 101010 1010101 010101 01010 1010 101 01",
                    "01 101 1010 01010 010101 1010101 101010 01010 0101 101 10");      // 全都是零翻转/完全翻转的情况 满足都大于i
        printf("__________________________________1___________________________________________________\n");   // 除了翻转的那一段,其余全部都是满足要求的

        compute_xy_lcs_length("10 101 0101 01010 1010 0101010 101010 10101 0101 010 10",
        "01 101 1010 01010 0101 0101010 010101 10101 1010 010 01");            // 相反段出现一个 翻转 长度大于i
        compute_xy_lcs_length("10 101 0101 01010 10101 1010101 010101 01010 1010 101 01",    
        "01 101 1010 01010 01010 1010101 101010 01010 0101 101 10");        // 相反段出现一个 翻转 长度小于i : 第五个段 此时是右边翻转状态 且长度没有大于等于6
        compute_xy_lcs_length("10 101 0101 01010 101010 0101010 101010 10101 0101 010 10",
        "01 101 1010 01010 010101 0101010 010101 10101 1010 010 01");            // 相反段出现一个 翻转 长度大于i

        /* 第六段-相同段 出现右翻转  长度分别为5 6 7*/     
        compute_xy_lcs_length(  "10 101 0101 01010 101010 10101 101010 10101 0101 010 10",
                    "01 101 1010 01010 010101 10101 010101 10101 1010 010 01");            // 相同段出现一个 翻转   长度大于i
        compute_xy_lcs_length(  "10 101 0101 01010 101010 101010 010101 01010 1010 101 01",
                    "01 101 1010 01010 010101 101010 101010 01010 0101 101 10");            // 相同段出现一个 翻转   长度小于i : 第六个段 
        compute_xy_lcs_length(  "10 101 0101 01010 101010 1010101  101010 10101 0101 010 10",
                    "01 101 1010 01010 010101 1010101  010101 10101 1010 010 01");            // 相同段出现一个 翻转   长度大于i

        printf("__________________________________2___________________________________________________\n");   // 允许相反段的长度为2
        /* 第五段-相反段 出现右翻转  长度分别为4 5 6*/                         
        compute_xy_lcs_length("10 101 0101 01010 1010 0101010 101010 10101 0101 010 10",
                "01 101 1010 01010 0101 0101010 010101 10101 1010 010 01");            // 相反段出现一个 翻转 长度大于i
        compute_xy_lcs_length("10 101 0101 01010 10101 1010101 010101 01010 1010 101 01",    
                "01 101 1010 01010 01010 1010101 101010 01010 0101 101 10");        // 相反段出现一个 翻转 长度小于i : 第五个段 此时是右边翻转状态 且长度没有大于等于6
        compute_xy_lcs_length("10 101 0101 01010 101010 0101010 101010 10101 0101 010 10",
                "01 101 1010 01010 010101 0101010 010101 10101 1010 010 01");            // 相反段出现一个 翻转 长度大于i

        /* 第六段-相同段 出现右翻转  长度分别为5 6 7*/     
        compute_xy_lcs_length("10 101 01 01010 10 10101 10 10101 01 010 10",
                "01 101 10 01010 01 10101 01 10101 10 010 01");            // 相同段出现一个 翻转   长度大于i
        compute_xy_lcs_length("10 101 01 01010 10 101010 01 01010 10 101 01",
                "01 101 10 01010 01 101010 10 01010 01 101 10");            // 相同段出现一个 翻转   长度小于i : 第六个段 
        compute_xy_lcs_length("10 101 01 01010 10 1010101  10 10101 01 010 10",
                "01 101 10 01010 01 1010101  01 10101 10 010 01");            // 相同段出现一个 翻转   长度大于i




        /* 假设翻转段长度都是2呢？*/                     

        printf("++++++++++++++++++++++++++++  5  +++++++++++++++++++++++++++++++++\n")    ;
        /* 第五段-相反段 出现右翻转  长度分别为2 3 4 5 6*/                         
        compute_xy_lcs_length(  "10 10 10 10 10    01 01 01 01 01 01",
                    "01 10 01 10 01    01 10 01 10 01 10");            

        compute_xy_lcs_length(  "10 10 10 10 101   10 10 10 10 10 10",    
                    "01 10 01 10 010   10 01 10 01 10 01");        

        compute_xy_lcs_length(  "10 10 10 10 1010   01 01 01 01 01 01",
                    "01 10 01 10 0101   01 10 01 10 01 10");    

        compute_xy_lcs_length(  "10 10 10 10 10101  10 10 10 10 10 10",    
                    "01 10 01 10 01010  10 01 10 01 10 01");      

        compute_xy_lcs_length(  "10 10 10 10 101010   01 01 01 01 01 01",
                    "01 10 01 10 010101   01 10 01 10 01 10");    
                    
        printf("++++++++++++++++++++++++++++  6  +++++++++++++++++++++++++++++++++\n");
        /* 第六段-相同段 出现右翻转  长度分别为3 4 5 6 7*/   
        compute_xy_lcs_length(  "10 10 10 10 10 101 10 10 10 10 10",
                    "01 10 01 10 01 101 01 10 01 10 01");            // 相同段出现一个 翻转   长度大于i 
                
        compute_xy_lcs_length(  "10 10 10 10 10 1010 01 01 01 01 01",
                    "01 10 01 10 01 1010 10 01 10 01 10");            // 相同段出现一个 翻转   长度大于i  

        compute_xy_lcs_length(  "10 10 10 10 10 10101 10 10 10 10 10",
                    "01 10 01 10 01 10101 01 10 01 10 01");            // 相同段出现一个 翻转   长度大于i

        compute_xy_lcs_length(  "10 10 10 10 10 101010 01 01 01 01 01",
                    "01 10 01 10 01 101010 10 01 10 01 10");            // 相同段出现一个 翻转   长度大于i

        compute_xy_lcs_length(  "10 10 10 10 10 1010101 10 10 10 10 10",
                    "01 10 01 10 01 1010101 01 10 01 10 01");            // 相同段出现一个 翻转   长度大于i
}
int main() {
    /* 都是交替的情况 每一组长度都为2 */
    // compute_xy_lcs_length("1010101010","0110011001");            //    距离 3
    // compute_xy_lcs_length("10101010101010","01100110011001");      //   距离 4
    // compute_xy_lcs_length("101010101010101010","011001100110011001");      // 距离 5

        /* T=6的情况 */         // =6
        compute_xy_lcs_length(  "10 10 10 10 10 10 10 10 10 10 10",
                                "01 10 01 10 01 10 01 10 01 10 01");      // 全都是零翻转/完全翻转的情况 都是2

/* 除非某个序列从头到尾都是101010 否则不可能只有一个段时完全翻转or0翻转，因为此时他两边的段必然也是发生了变化的*/
        
        // [只将第五段完全逆转]: 两边的4/6段都是单逆转 且没有左其他处理
        // 猜测：小于6     // =4
        compute_xy_lcs_length(  "10 10 10 10 01 10 10 10 10 10 10",
                                "01 10 01 10 10 10 01 10 01 10 01");      // 全都是零翻转/完全翻转的情况 都是2
      
        // [只将第五段完全逆转]: 4/6长度都为4 此时4满足了要求 6还没满足(长度不够)
        // 猜测: 小于6     // =6   [  错误  ]
        compute_xy_lcs_length(  "10 10 10 1010 01 1010 10 10 10 10 10",
                                "01 10 01 1010 10 1010 01 10 01 10 01");      // 全都是零翻转/完全翻转的情况 都是2
        // [5 6段都是完全逆转] : 第四段：2  第七段：2
        // 猜测： 小于6，因为逆转段不满足长度要求      // =5
        compute_xy_lcs_length(  "10 10 10 10 01 1010 01 10 10 10 10",
                                "01 10 01 10 10 1010 10 10 01 10 01");  

        //单翻转段以及长度  第四段：4   第七段：4      
        // 推论: 5  因为第七段不满足长度要求           // =5
        compute_xy_lcs_length(  "10 10 10 1010 01 1010 0101 01 01 01 01",
                                "01 10 01 1010 10 1010 1010 01 10 01 10");      
        //单翻转段以及长度  第四段：4  第七段：5         // =6
        compute_xy_lcs_length(  "10 10 10 1010 01 1010 01010 10 10 10 10",
                                "01 10 01 1010 10 1010 10101 10 01 10 01");      
    
        // 都是长度2 零翻转变全翻转  【ps：从某个段0翻转变为完全反转之后，就必须一直是了，否则想变回来的画肯定要存在一个单翻转】
        // 预期：小于6                   // =4
        compute_xy_lcs_length(  "10 10 10 10 10 01 10 01 10 01 10",
                                "01 10 01 10 01 10 01 01 01 01 01");      // 全都是零翻转/完全翻转的情况 都是2
    

        // 都是长度2 零翻转变全翻转 但但反转的长度满足了要求
        // 预期 6：                 // =6   [ 错误 ]
        compute_xy_lcs_length(  "10 10 10 10 101010 01 10 01 10 01 10",
                                "01 10 01 10 010101 01 01 01 01 01 01");      // 全都是零翻转/完全翻转的情况 都是2

}